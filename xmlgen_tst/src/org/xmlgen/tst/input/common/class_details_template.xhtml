<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd" > 
   
<html xmlns="http://www.w3.org/1999/xhtml">
  <?gen <Import 'file:/' + cdir + 'template_defs.xml'> 
  ?>
  <?gen begin 
        classifierKind = clazz.eClass().name.toUpperFirst()
  ?>
  <head>
    <title><?gen clazz.name.toUpperFirst() ?></title>

    <meta content="??/??/????" name="date"><?gen attr content = date ?></meta>

    <meta content="???" name="keywords"><?gen attr content = title ?></meta>

    <link href="files/stylesheet.css" rel="stylesheet" title="Style"
          type="text/css"><?gen attr href = config + '/files/stylesheet.css' ?></link>

    <script src="files/script.js" type="text/javascript"
            xml:space="preserve">
			<?gen attr src = config + '/files/script.js' ?>
			</script>
  </head>

  <body>
  <?gen begin
        methods = clazz.ownedOperation->select(m | m.getAppliedStereotype('StandardProfile::Create') = null),
        table_methodIds_cat = Sequence{},
		someAreAbstract = false,
		someAreConcrete = false,
		someAreStatic = false,
		someAreInstance = false,
		someArePublic = false,
		someAreProtected = false,
		someArePackage = false,
		someArePrivate = false
?>
    <?gen [Loop] method : methods ?>
	
      <?gen begin when method.isStatic 
         categories = 1,
		 someAreStatic = true
      ?>
      <?gen end export: categories, someAreStatic ?>
	  
      <?gen begin when not method.isStatic 
          categories = 2,
		  someAreInstance = true
      ?>
      <?gen end export: categories, someAreInstance ?>
	  
      <?gen begin when method.isAbstract
            categories = categories + 4,
			someAreAbstract = true
      ?>
      <?gen end export: categories, someAreAbstract ?>
	  
      <?gen begin when not method.isAbstract 
            categories = categories + 8,
			someAreConcrete = true
      ?>	  
      <?gen end export: categories, someAreConcrete ?>
	  
      <?gen begin when method.visibility = uml::VisibilityKind::public
            categories = categories + 16,
			someArePublic = true
      ?>
      <?gen end export: categories, someArePublic ?>

	  <?gen begin when method.visibility = uml::VisibilityKind::package
            categories = categories + 32,
			someArePackage = true
      ?>
      <?gen end export: categories, someArePackage ?>

      <?gen begin when method.visibility = uml::VisibilityKind::protected
            categories = categories + 64,
			someAreProtected = true
      ?>
      <?gen end export: categories, someAreProtected ?>	  
	  
	  <?gen begin when method.visibility = uml::VisibilityKind::private
            categories = categories + 128,
			someArePrivate = true
      ?>
      <?gen end export: categories, someArePrivate ?>
	  
      <?gen begin
            table_methodIds_cat = table_methodIds_cat->including('"' + method.id() + '":' + categories)
      ?>
      <?gen end export: table_methodIds_cat ?>
    <?gen [Loop] end export: table_methodIds_cat,
                             someAreAbstract,
		                     someAreConcrete,
		                     someAreStatic,
		                     someAreInstance,
		                     someArePublic,
		                     someAreProtected,
		                     someArePackage,
		                     someArePrivate	?>
  <script type="text/javascript" xml:space="preserve">// <?gen '<![CDATA[
    try {
        if (location.href.indexOf(\'is-external=true\') == -1) {
            parent.document.title="' + clazz.name + '";
        }
    }
    catch(err) {
    }
	var methods = {' + table_methodIds_cat->sep(',')->toString() + '};
	var tabs = {' ?> 
	            <?gen begin 
				cells = Sequence{'65535:["t0","All Methods"]'}
				?>
				<?gen end export: cells 
				?>
				
				<?gen begin when someAreStatic
				cells = cells + Sequence{'1:["t1","Static Methods"]'}
				?>
				<?gen end export: cells 
				?>
				
				<?gen begin when someAreInstance
				cells = cells + Sequence{'2:["t2","Instance Methods"]'}
				?>
				<?gen end export: cells 
				?>

				<?gen begin when someAreAbstract
				cells = cells + Sequence{'4:["t4","Abstract Methods"]'}
				?>
				<?gen end export: cells 
				?>

				<?gen begin when someAreConcrete
				cells = cells + Sequence{'8:["t8","Concrete Methods"]'}
				?>
				<?gen end export: cells 
				?>

				<?gen begin when someArePublic
				cells = cells + Sequence{'16:["t16","Public Methods"]'}
				?>
				<?gen end export: cells 
				?>

				<?gen begin when someArePackage
				cells = cells + Sequence{'32:["t32","Package Methods"]'}
				?>
				<?gen end export: cells 
				?>

				<?gen begin when someAreProtected
				cells = cells + Sequence{'64:["t64","Protected Methods"]'}
				?>
				<?gen end export: cells 
				?>

				<?gen begin when someArePrivate
				cells = cells + Sequence{'128:["t128","Private Methods"]'}
				?>
				<?gen end export: cells 
				?>				
				<?gen cells->sep(', ')->toString() + '};
	var altColor = "altColor";
	var rowColor = "rowColor";
	var tableTab = "tableTab";
	var activeTableTab = "activeTableTab";	
//]]>' ?> 
</script>
<?gen end export: 
        someAreAbstract,
		someAreConcrete,
		someAreStatic,
		someAreInstance,
		someArePublic,
		someAreProtected,
		someArePackage,
		someArePrivate
?>
 <noscript> &lt;div&gt;JavaScript is disabled on your
  browser.&lt;/div&gt; </noscript> <!--  ========= START OF TOP NAVBAR ======= -->
    <div class="topNav">
      <a id="navbar.top">
       <!--  --> </a>
      <div class="skipNav">
        <a
        href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#skip.navbar.top"
        title="Skip navigation links">Skip navigation links</a>
      </div>
      <a id="navbar.top.firstrow">
       <!--  --> </a>
      <ul class="navList" title="Navigation">
        <li>
          <a
          href="???">
		  <?gen attr href = url + '/' + outputFilename ?>
		  Overview		  
		  </a>
		  
        </li>
        <li>
          <a
          href="???">
		  <?gen attr href = url + '/' + outPackagefilename ?>
		  Package
		  </a>
        </li>
        <li class="navBarCell1Rev">
          <?gen classifierKind ?>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/class-use/StandardPlugin.html">Use</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/package-tree.html">Tree</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/deprecated-list.html">Deprecated</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/index-files/index-1.html">Index</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/help-doc.html">Help</a>
        </li>
      </ul>
    </div>
    <div class="subNav">
      <?gen <Insert classifier_navigation(previousClass, url = url, packageName = name, nextClass)> ?>
      <ul class="navList">
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/index.html?org/eclipse/uml2/uml/profile/standard/StandardPlugin.html">Frames</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html">No Frames</a>
        </li>
      </ul>
      <ul class="navList" id="allclasses_navbar_top" style="display: block;">
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/allclasses-noframe.html">All Classes</a>
        </li>
      </ul>
      <div><script type="text/javascript" xml:space="preserve">//<![CDATA[
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //
//]]></script>
      </div>
      <div>
        <ul class="subNavList">
          <li>
            Summary: 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#nested.class.summary">Nested</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#field.summary">Field</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#constructor.summary">Constr</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#method.summary">Method</a>
          </li>
        </ul>
        <ul class="subNavList">
          <li>
            Detail: 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#field.detail">Field</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#constructor.detail">Constr</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#method.detail">Method</a>
          </li>
        </ul>
      </div>
      <a id="skip.navbar.top">
       <!--  --> </a>
    </div>
    <!--  ========= END OF TOP NAVBAR ========= -->
    <!--  ======== START OF CLASS DATA ======== -->
    <div class="header">
      <div class="subTitle">
        <?gen name ?>
      </div>
      <h2 title="Classifier kind ???" class="title">
	    <?gen [OwningClass] begin when clazz.owner.oclIsKindOf(uml::Type)
		      owningType = clazz.owner
		?> 
	    <?gen attr title = classifierKind + ' ' + owningType.name + '.' + clazz.name ?>
        <?gen classifierKind + ' ' ?><?gen <Insert writeType(owningType, object=null)> ?>.<?gen <Insert writeType(clazz, object=null)> ?>
		<?gen [OwningClass] end ?>
	    <?gen begin when not clazz.owner.oclIsKindOf(uml::Type)
		?> 
	    <?gen attr title = classifierKind + ' ' + clazz.name ?>
        <?gen classifierKind + ' ' ?><?gen <Insert writeType(clazz, object=null)> ?>
		<?gen end ?>		
      </h2>
    </div>
    <div class="contentContainer">	
	
	<?gen [InheritageHierarchy] begin when clazz.oclIsKindOf(uml::Class) or clazz.oclIsKindOf(uml::Interface)
	?>
	<?gen [Descendants] begin
	                    ancestors = clazz.ancestors(),
                     	descendants = ancestors->reverse() + Sequence{ clazz }
    ?> 
    
	<?gen [DirectDescendants] begin when descendants <> null and not descendants->isEmpty()
    
    directDescendants = descendants->first(), 
    descendants = (if descendants->size() > 1 then 
                      descendants->asSequence()->subSequence(2, descendants->size()) 
                   else 
                      Sequence{}
                   endif)
   ?>
      <ul class="inheritance">
        <li>
		<?gen [Descendant] directDescendant : directDescendants, comma : directDescendants->asSequence()->collect(p | ', ')->subSequence(1, directDescendants->size() - 1)->including('') ?>
		<?gen [Write Qualified Name] begin 
		      packageName = directDescendant.qualifiedName.replaceAll('::', '.').replace('[^\\.]*\\.', '').replace('[^\\.]+$', '')
		?>  
        <?gen packageName + comma ?><?gen <Insert writeType(directDescendant, null)> ?>
		<?gen [Write Qualified Name] end ?>
		<?gen [Descendant] end ?>
        </li>
		<?gen [SubsequentDescendance] begin when not descendants->isEmpty() ?>
        <li>
          <?gen <Insert [DirectDescendants]> ?>
        </li>
		<?gen [SubsequentDescendance] end ?>
      </ul>
	  <?gen [DirectDescendants] end ?> 
	  <?gen [Descendants] end export: ancestors ?>
	  <?gen [InheritageHierarchy] end export: ancestors ?>
	  
	  <?gen begin 
	  isEnumeration = clazz.oclIsKindOf(uml::Enumeration)
	  ?>
	  <?gen [InterfaceRealization] begin when clazz.eClass().getEStructuralFeature('interfaceRealization') <> null and not isEnumeration ?>
      <?gen begin when clazz.interfaceRealization <> null and not clazz.interfaceRealization->isEmpty() ?>
      <div class="description">
        <ul class="blockList">
          <li class="blockList">
		  <?gen [Implemented_Interfaces] begin when not clazz.interfaceRealization->isEmpty()
		                                    interfaces = clazz.interfaceRealization->collect(ir : uml::InterfaceRealization | ir.supplier)
		  ?>
            <dl>
              <dt>
                All Implemented Interfaces:
              </dt>
              <dd>
                <?gen interfaces->collect(i : uml::Interface | i.qualifiedName.replaceAll('::', '.').replace('[^\\.]*\\.', ''))->sep(', ')->toString() ?>
              </dd>
            </dl>
			<?gen [Implemented_Interfaces] end ?>
            <hr />
            <br />
<pre xml:space="preserve"><?gen <Insert qualifiers(clazz)> ?>class <span class="typeNameLabel"><?gen clazz.name ?></span>
			  <?gen begin 
			           generalNames = clazz.general->collect(c : uml::Classifier | c.qualifiedName.replaceAll('::', '.').replace('[^\\.]*\\.', ''))
			  ?>
			  <?gen begin when generalNames <> null and not generalNames->isEmpty() 
			           generalNamesStr = generalNames->sep(', ')->toString()
			  ?>
extends <?gen generalNamesStr ?>
              <?gen end ?>
			  <?gen end ?>
</pre>
            <?gen comment : clazz.ownedComment ?>
            <div class="block">
			<?gen comment.literalComment() ?>
               <!--  begin-user-doc -->
               <!--  end-user-doc -->
            </div>
          </li>
        </ul>
      </div>
	  <?gen end ?>
	  <?gen [InterfaceRealization] end ?>
      <div class="summary">
        <ul class="blockList">
          <li class="blockList">
		  
		    <?gen [Template parameters] begin when clazz.oclIsKindOf(uml::TemplateableElement)
			      templateSignature = clazz.ownedTemplateSignature
			?>
			<?gen [Template parameters] begin when not templateSignature->isEmpty() 
							            parameters = templateSignature.ownedParameter
			?>
            <!--  ======== Template parameters SUMMARY ======== -->
            <ul class="blockList">
              <li class="blockList">
                <a id="nested.class.summary">
                 <!--  --> </a>
                <h3>
                  Template Summary
                </h3>
                <table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
                  <caption>
                    <span>Template parameters</span><span class="tabEnd"> </span>
                  </caption>
                  <tbody>
                    <tr>
                      <th class="colFirst" scope="col">
                        Parameter
                      </th>
                      <th class="colLast" scope="col">
                        Description
                      </th>
                    </tr>
					<?gen [class init] begin
					                        class = 'rowColor'
					?>
                    <?gen [Generic Parameters Loop] parameter : parameters ?>
		            <?gen [alternate class] begin when parameter.ownedElement <> null 
		                  ownedElement = parameter.parameteredElement,
					      class = if class = 'rowColor' then 'altColor' else 'rowColor' endif
		            ?>
					
					<tr class="???Color">
					<?gen attr class = class ?>
                      <td class="colFirst">
                        <?gen [Generic Type] begin when ownedElement.oclIsKindOf(uml::Type)
						                     type = ownedElement
						?>
                        <code><span class="memberNameLink">
						<a href="???"
                        title="class in ???">
						<?gen attr href = url + '/' + classfilename + '#' + ownedElement.id() ?>
						<?gen attr title = 'class in ' + name + '.' + clazz.name ?>						
		                <?gen <Insert writeType(type, object = null)> ?>
						</a></span></code>						
		                <?gen [Generic Type] end ?>
					    <?gen [Generic Operation] begin when ownedElement.oclIsKindOf(uml::Operation)
						      operation = ownedElement
						?>
		                <?gen <Insert operationType(operation)> ?><?gen ' '?><?gen <Insert operationSignature(operation, operation.name)> ?>
		                <?gen [Generic Operation] end ?>
                      </td>
                      <td class="colLast">					  
						<?gen comment : ownedElement.ownedComment ?>
                        <div class="block">
                          <?gen comment.literalComment() ?>
                        </div>
                      </td>
                    </tr>
		            <?gen [alternate class] end export: class ?>
                    <?gen [Generic Parameters Loop] end ?>
                  </tbody>
                </table>
              </li>
            </ul>
			<?gen [Template parameters] end ?>
			<?gen [Template parameters] end ?>
		  
		    <?gen [NestedClasses] begin when clazz.oclIsKindOf(uml::Class) 
			      nestedClasses = clazz.nestedClassifier->select(nested | not nested.isTemplateParameter())
			?>
			<?gen [NestedClasses] begin when not nestedClasses->isEmpty() ?>
            <!--  ======== NESTED CLASS SUMMARY ======== -->
            <ul class="blockList">
              <li class="blockList">
                <a id="nested.class.summary">
                 <!--  --> </a>
                <h3>
                  Nested Class Summary
                </h3>
                <table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Nested Class Summary table, listing nested classes, and an explanation">
                  <caption>
                    <span>Nested Classes</span><span class="tabEnd"> </span>
                  </caption>
                  <tbody>
                    <tr>
                      <th class="colFirst" scope="col">
                        Modifier and Type
                      </th>
                      <th class="colLast" scope="col">
                        Class and Description
                      </th>
                    </tr>
					<?gen [class init] begin
					                        class = 'rowColor'
					?>
					<?gen nestedClass : nestedClasses ?>
					<?gen [alternate class] begin 
					                             class = if class = 'rowColor' then 'altColor' else 'rowColor' endif
					?>
                    <tr class="???Color">
					<?gen attr class = class ?>
                      <td class="colFirst">
                        <code>
						<?gen <Insert qualifiers(nestedClass)> ?>class
						</code>
                      </td>
                      <td class="colLast">					  
                        <code><span class="memberNameLink">
			   		    <?gen begin
				                 template = 'file:/' + cdir + 'class_details_template.xhtml',
				                 classfilename = name + '.' + clazz.name + '.' + nestedClass.name + '_details.xhtml',
		                         output = outputDir + '/' + classfilename,
								 clazz = nestedClass
		                ?>
		                <?gen <Expand> 
		                ?>
		                <?gen end export: classfilename
		                ?>
						<a href="???"
                        title="class in ???">
						<?gen attr href = url + '/' + classfilename ?>
						<?gen attr title = 'class in ' + name ?>
						<?gen clazz.name + '.' + nestedClass.name ?>
						</a></span></code>
						<?gen comment : nestedClass.ownedComment ?>
                        <div class="block">
                          <?gen comment.literalComment() ?>
                        </div>
                      </td>
                    </tr>
					<?gen [alternate class] end export: class ?>
                  </tbody>
                </table>
				<?gen begin
				         ancestors = clazz.general,
				         inheritedNestedClasses = ancestors->collect(c : uml::Classifier | c.nestedClassifier),
						 theirQualifiedNames = inheritedNestedClasses->collect(c : uml::Classifer | c.qualifiedName.replaceAll('::', '.').replace('[^\\.]*\\.', '')),
						 theirQualifiedNames = theirQualifiedNames->sep(', ')->toString()
				?>				
                <ul class="blockList">
                  <li class="blockList">
				  <?gen begin clazzQualifiedName = name + '.' + clazz.name ?>
                    <a
                    id="nested.classes.inherited.from.class.???">
                     <!--  --> 
					 <?gen attr id = 'nested.classes.inherited.from.class' + '.' + clazzQualifiedName ?>
					 </a>
                    <h3>
                      <?gen 'Nested classes/interfaces inherited from class ' + clazzQualifiedName ?>
                    </h3>
                    <code>
					<?gen theirQualifiedNames ?>
					</code>
                  </li>
                </ul>
              </li>
            </ul>
			<?gen [NestedClasses] end ?>
			<?gen [NestedClasses] end ?>
            <!--  =========== FIELD SUMMARY =========== -->
			<?gen [IsThereField] begin 
			      isThereFieldFeature = clazz.eClass().getEStructuralFeature('ownedAttribute') <> null
			?>
			<?gen [Fields] begin when isThereFieldFeature
			               fields = clazz.ownedAttribute
			?>
			<?gen [Fields] begin when not fields->isEmpty() ?>
            <ul class="blockList">
              <li class="blockList">
                <a id="field.summary">
                 <!--  --> </a>
                <h3>
                  Field Summary
                </h3>
                <table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
                  <caption>
                    <span>Fields</span><span class="tabEnd"> </span>
                  </caption>
				  <?gen begin
				  class = 'rowColor' 
				  ?>
                  <tbody>
				  <?gen [SortedFields] begin 
				        when fields <> null
					    fields = fields->select(f | f.visibility = uml::VisibilityKind::public)->sortedBy(f | f.name)
						  	   +
						         fields->select(f | f.visibility = uml::VisibilityKind::package)->sortedBy(f | f.name)
							   +
							     fields->select(f | f.visibility = uml::VisibilityKind::protected)->sortedBy(f | f.name)
							   +
								 fields->select(f | f.visibility = uml::VisibilityKind::private)->sortedBy(f | f.name)
				  ?>
                    <tr>
                      <th class="colFirst" scope="col">
                        Modifier and Type
                      </th>
                      <th class="colLast" scope="col">
                        Field and Description
                      </th>
                    </tr>
					<?gen [Field] begin 
				                        when not fields->isEmpty()
						class = if class = 'altColor' then 'rowColor' else 'altColor' endif,
						field = fields->first(),
						fields = fields->subSequence(2, fields->size())
				    ?>
                    <tr class="???">
					<?gen attr class = class ?>
                      <td class="colFirst">
                        <code>
                          <?gen <Insert writeModifiers(field)> ?>
                          <?gen <Insert writeTypeOf(field)> ?>
                      </code>
                      </td>
                      <td class="colLast">
                        <code><span class="memberNameLink"><?gen <Insert writeName(field, field.name)> ?></span></code>
						<?gen comment : field.ownedComment ?>
                        <div class="block">
			            <?gen comment.literalComment() ?>
                        </div>
                      </td>
                    </tr>
					<?gen <Insert [Field]> ?>
					<?gen [Field] end ?>
					<?gen [SortedFields] end export: fields ?>
                  </tbody>
				  <?gen end export: fields ?>
                </table>
               <?gen <Insert writeInheritedElements(eFeatureName = 'ownedAttribute', ancestors = ancestors, elementKind = 'fields')> ?>
              </li>
            </ul>
			<?gen [Fields] end export: fields ?>
			<?gen [Fields] end export: fields ?>
			<?gen [IsThereField] end export: isThereFieldFeature, fields ?>
            <!--  ======== CONSTRUCTOR SUMMARY ======== -->
			<?gen [IsThereMethod] begin 
			                      isThereMethodFeature = clazz.eClass().getEStructuralFeature('ownedOperation') <> null
			?>
			<?gen [Constructors Summary 1] begin when isThereMethodFeature
			                               constructors = clazz.ownedOperation->select(op | op.getAppliedStereotype('StandardProfile::Create') <> null and not op.isTemplateParameter())
			?>
			<?gen [Constructors Summary 2] begin
			      when not constructors->isEmpty()
		    ?>
            <ul class="blockList">
              <li class="blockList">
                <a id="constructor.summary">
                 <!--  --> </a>
                <h3>
                  Constructor Summary
                </h3>
                <table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
                  <caption>
                    <span>Constructors</span><span class="tabEnd"> </span>
                  </caption>
                  <tbody>
                    <tr>
                      <th class="colOne" scope="col" colspan="2">
                        Constructor and Description
                      </th>
                    </tr>
					<?gen begin class = 'rowColor' ?>
					<?gen constructor : constructors ?>
					<?gen begin 
					      class = if class = 'altColor' then 'rowColor' else 'altColor' endif 
				    ?>
                    <?gen <Insert operation(constructor, clazz.name, class)> ?>
					<?gen end export: class ?>
                  </tbody>
                </table>
              </li>
            </ul>
			<?gen [Constructors Summary 2] end ?>
			<?gen [Constructors Summary 1] end export: constructors ?>
			<?gen [IsThereMethod] end export: isThereMethodFeature, constructors ?>
            <!--  ========== METHOD SUMMARY =========== -->
            <?gen [Methods Summary 1] begin when isThereMethodFeature
                            methods = clazz.ownedOperation->select(m | m.getAppliedStereotype('StandardProfile::Create') = null and not m.isTemplateParameter()),
							allInheritedElements = Sequence{}
            ?>
            <?gen [Methods Summary 2] begin when not methods->isEmpty() 
			                          methods = methods->select(m | m.visibility = uml::VisibilityKind::public)->sortedBy(m | m.name)
									            +
												methods->select(m | m.visibility = uml::VisibilityKind::package)->sortedBy(m | m.name)
												+
												methods->select(m | m.visibility = uml::VisibilityKind::protected)->sortedBy(m | m.name)
												+
												methods->select(m | m.visibility = uml::VisibilityKind::private)->sortedBy(m | m.name)
			?>
            <ul class="blockList">
              <li class="blockList">
                <a id="method.summary">
                 <!--  --> </a>
                <h3>Method Summary</h3>
                <table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
                  <caption>
                    <span id="t0" class="activeTableTab"><span>All Methods</span><span
                    class="tabEnd">&nbsp;</span></span>
					<?gen begin when someArePublic ?>
					<span
                    id="t16" class="tableTab"><span><a
                    href="javascript:show(16);">Public Methods</a></span><span
                    class="tabEnd">&nbsp;</span></span>
					<?gen end ?>
					<?gen begin when someArePackage ?>
					<span
                    id="t32" class="tableTab"><span><a
                    href="javascript:show(32);">Package Methods</a></span><span
                    class="tabEnd">&nbsp;</span></span>
					<?gen end ?>
					<?gen begin when someAreProtected ?>
					<span
                    id="t64" class="tableTab"><span><a
                    href="javascript:show(64);">Protected Methods</a></span><span
                    class="tabEnd">&nbsp;</span></span>
					<?gen end ?>
					<?gen begin when someArePrivate ?>
					<span
                    id="t128" class="tableTab"><span><a
                    href="javascript:show(128);">Private Methods</a></span><span
                    class="tabEnd">&nbsp;</span></span>
					<?gen end ?>					
					<?gen begin when someAreStatic ?>
					<span
                    id="t1" class="tableTab"><span><a
                    href="javascript:show(1);">Static Methods</a></span><span
                    class="tabEnd">&nbsp;</span></span>
					<?gen end ?>
					<?gen begin when someAreInstance ?>
					<span
                    id="t2" class="tableTab"><span><a
                    href="javascript:show(2);">Instance Methods</a></span><span
                    class="tabEnd">&nbsp;</span></span>
					<?gen end ?>
					<?gen begin when someAreAbstract ?>
					<span
                    id="t4" class="tableTab"><span><a
                    href="javascript:show(4);">Abstract Methods</a></span><span
                    class="tabEnd">&nbsp;</span></span>
					<?gen end ?>
					<?gen begin when someAreConcrete ?>
					<span
                    id="t8" class="tableTab"><span><a
                    href="javascript:show(8);">Concrete Methods</a></span><span
                    class="tabEnd">&nbsp;</span></span>
					<?gen end ?>
                  </caption>
                  <tbody>
                    <tr>
                      <th class="colFirst" scope="col">
                        Modifier and Type
                      </th>
                      <th class="colLast" scope="col">
                        Method and Description
                      </th>
                    </tr>
                    <?gen [Methods] begin 
                          class = 'altRow'
                    ?>
                    <?gen [MethodsLoop] method : methods ?>
                    <?gen [Method] begin
                                   class = if class = 'altColor' then 'altRow' else 'altColor' endif
                    ?>
					<?gen <Insert operation(method, method.name, class)> ?>
                    <?gen [Method] end export: class ?>
                    <?gen [MethodsLoop] end ?>
                    <?gen [Methods] end ?>
                  </tbody>
                </table>
				<?gen <Insert writeInheritedElements(eFeatureName = 'ownedOperation', ancestors = ancestors, elementKind = 'methods')> ?>
              </li>
            </ul>
          <?gen [Methods Summary 2] end export: methods, allInheritedElements ?>
		  <?gen begin 
		        allInheritedMethods = allInheritedElements ?>
		  <?gen end export: allInheritedMethods ?>
          <?gen [Methods Summary 1] end export: methods, allInheritedMethods ?>
          </li>
        </ul>
      </div>
      <div class="details">
        <ul class="blockList">
          <li class="blockList">
            <!--  ============ FIELD DETAIL =========== -->
			<?gen [Fields Details] begin when isThereFieldFeature and fields <> null and not fields->isEmpty() ?>
            <ul class="blockList">
              <li class="blockList">
                <a id="field.detail">
                 <!--  --> </a>
                <h3>
                  Field Detail
                </h3>
				<?gen [Field Detail] field : fields ?>
                <a id="???id">
				<?gen attr id = field.id() + '_details' ?>
                 <!--  --> </a>
                <ul class="blockListLast">
                  <li class="blockList">
                    <h4>
                      <?gen field.name ?>
                    </h4>
<pre xml:space="preserve"><?gen <Insert writeModifiers(field)> ?> <?gen <Insert writeTypeOf(field)> ?><?gen ' '?><?gen field.name ?></pre>
						<?gen comment : field.ownedComment ?>
                        <div class="block">
			            <?gen comment.literalComment() ?>
                       <!--  begin-user-doc -->
                       <!--  end-user-doc -->
                    </div>
                  </li>
                </ul>
              </li>
            </ul>
			<?gen [Fields Details] end ?>
            <!--  ========= CONSTRUCTOR DETAIL ======== -->
			<?gen [Constructor details] begin when isThereMethodFeature and constructors <> null and not constructors->isEmpty()			      
			?>
            <ul class="blockList">
              <li class="blockList">
                <a id="constructor.detail">
                 <!--  --> </a>
                <h3>
                  Constructor Detail
                </h3>
				<?gen constructor : constructors ?>
                <a id="id???">
				<?gen attr id = constructor.id() + '_details' ?>
                 <!--  --> </a>
                <ul class="blockListLast">
                  <li class="blockList">
                    <h4>
                      <?gen constructor.name ?>
                    </h4>
<pre xml:space="preserve"><?gen <Insert operationModifiers(constructor)> ?> <?gen <Insert operationSignature(constructor, constructor.name)> ?></pre>
                   <?gen <Insert writeOperationDetails(constructor, Sequence{})> ?>
                  </li>
                </ul>
              </li>
            </ul>
			<?gen [Constructor details] end ?>
            <!--  ============ METHOD DETAIL ========== -->
			<?gen [Methods details] begin when isThereMethodFeature and methods <> null and not methods->isEmpty() ?>
            <ul class="blockList">
              <li class="blockList">
                <a id="method.detail">
                 <!--  --> </a>
                <h3>
                  Method Detail
                </h3>
				<?gen method : methods ?>
                <a id="id???_details">
				<?gen attr id = method.id() + '_details' ?>
                 <!--  --> </a>
                <ul class="blockList">
                  <li class="blockList">
                    <h4>
                      <?gen method.name ?>
                    </h4>
<pre xml:space="preserve"><?gen <Insert operationModifiers(method)> ?><?gen <Insert operationType(method)> ?><?gen ' '?><?gen <Insert operationSignature(method, method.name)>?></pre>
					<?gen <Insert writeOperationDetails(method, allInheritedMethods)> ?>
                  </li>
                </ul>
              </li>
            </ul>
			<?gen [Methods details] end ?>
          </li>
        </ul>
      </div>
    </div>
    <!--  ========= END OF CLASS DATA ========= -->
    <!--  ======= START OF BOTTOM NAVBAR ====== -->
    <div class="bottomNav">
      <a id="navbar.bottom">
       <!--  --> </a>
      <div class="skipNav">
        <a
        href="???#skip.navbar.bottom"
        title="Skip navigation links">
		<?gen attr href = url + '/' + classfilename + '#skip.navbar.bottom' ?>
		Skip navigation links		
		</a>	
      </div>
      <a id="navbar.bottom.firstrow">
       <!--  --> </a>
      <ul class="navList" title="Navigation">
        <li>
          <a
          href="???">
		  <?gen attr href = url + '/' + classfilename ?>
		  Overview
		  </a>
        </li>
        <li>
          <a href="???">
		  <?gen attr href = url + '/' + outPackagefilename ?>
		  Package
		  </a>		  
        </li>
        <li class="navBarCell1Rev">
          Class
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/class-use/StandardPlugin.html">Use</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/package-tree.html">Tree</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/deprecated-list.html">Deprecated</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/index-files/index-1.html">Index</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/help-doc.html">Help</a>
        </li>
      </ul>
      <div class="aboutLanguage">
        Powered by Xmlgen
      </div>
    </div>
    <div class="subNav">
    <?gen <Insert classifier_navigation(url = url, packageName = name, previousClass, nextClass)> ?>
      <ul class="navList">
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/index.html?org/eclipse/uml2/uml/profile/standard/StandardPlugin.html">Frames</a>
        </li>
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html">No Frames</a>
        </li>
      </ul>
      <ul class="navList" id="allclasses_navbar_bottom" style="display: block;">
        <li>
          <a
          href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/allclasses-noframe.html">All Classes</a>
        </li>
      </ul>
      <div><script type="text/javascript" xml:space="preserve">//<![CDATA[
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //
//]]></script>
      </div>
      <div>
        <ul class="subNavList">
          <li>
            Summary: 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#nested.class.summary">Nested</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#field.summary">Field</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#constructor.summary">Constr</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#method.summary">Method</a>
          </li>
        </ul>
        <ul class="subNavList">
          <li>
            Detail: 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#field.detail">Field</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#constructor.detail">Constr</a> | 
          </li>
          <li>
            <a
            href="http://download.eclipse.org/modeling/mdt/uml2/javadoc/5.1.0/org/eclipse/uml2/uml/profile/standard/StandardPlugin.html#method.detail">Method</a>
          </li>
        </ul>
      </div>
      <a id="skip.navbar.bottom">
       <!--  --> </a>
    </div>
    <!--  ======== END OF BOTTOM NAVBAR ======= -->
  </body>
</html>