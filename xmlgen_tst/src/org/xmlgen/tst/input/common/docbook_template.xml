<?xml version="1.0" encoding="UTF-8"?>
<?gen <load doc_for_papyrus.ExpansionServices>
?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:ns5="http://www.w3.org/2000/svg"
      xmlns:ns4="http://www.w3.org/1999/xhtml"
      xmlns:ns3="http://www.w3.org/1998/Math/MathML"
      xmlns:ns="http://www.w3.org/1999/xlink"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title><?gen uml->at(1).name ?></title>

    <?gen [AUTHOR]
            auteur : info.author, 
            prenom : auteur.firstname, 
            nom : auteur.lastname 
    ?>

    <author>
      <personname><firstname>
           

          <?gen prenom ?>

           
        </firstname> <surname>
           

          <?gen nom ?>

           
        </surname></personname>

      <affiliation>
        <orgname/>
      </affiliation>
    </author>

    <?gen [AUTHOR] end
    ?>

    <pubdate/>
  </info>

  <?gen package : uml->closure(package : uml::Package | package.nestedPackage)
   ?>

  <chapter>
    <title>Package <?gen package.name?></title>

    <?gen [Comments] comment : package.ownedComment
    ?>

    <para><?gen comment.body ?></para>

    <?gen [Comments] 
             end
    ?>

    <?gen [Diagrams]
             relatedDiagram : notation->select(d | d.styles->at(3).owner = package) 
   ?>

    <figure>
      <title><?gen relatedDiagram.name ?></title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="???">
            <?gen attr fileref = relatedDiagram.svg(outputDir, imagesPath, 800, 600) ?>
          </imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <?gen [Diagrams] 
             end 
   ?>

    <?gen [Classifiers] classifier : package.packagedElement->filter(uml::Classifier)
    ?>

    <section>
      <title><?gen classifier.name
      ?></title>

      <para><?gen [Descendants] begin 
                                   descendants = classifier.ancestors()->reverse()
   ?> <?gen [DirectDescendants] begin when descendants <> null and not descendants->isEmpty()
    
    directDescendants = descendants->first(), 
    descendants = (if descendants->size() > 1 then 
                      descendants->asSequence()->subSequence(2, descendants->size()) 
                   else 
                      Sequence{}
                   endif)
   ?> <itemizedlist>
          <?gen [Descendant] descendant : directDescendants ?>

          <listitem>
            <para><?gen descendant.name ?></para>
          </listitem>

          <?gen [Descendant] end ?>

          <?gen [SubsequentDescendance] begin when not descendants->isEmpty() ?>

          <listitem>
            <?gen <Insert [DirectDescendants]> ?>

            <?gen [Void] begin when false ?>

            <para/>

            <?gen [Void] end ?>
          </listitem>

          <?gen [SubsequentDescendance] end ?>
        </itemizedlist> <?gen [DirectDescendants] end
       ?> <?gen [Descendants] end ?></para>
    </section>

    <?gen [Classifiers] end
   ?>
  </chapter>
</book>
